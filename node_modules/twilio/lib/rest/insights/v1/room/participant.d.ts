/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { SerializableClass } from '../../../../interfaces';

type ParticipantCodec = 'VP8'|'H264'|'VP9';

type ParticipantEdgeLocation = 'ashburn'|'dublin'|'frankfurt'|'singapore'|'sydney'|'sao_paulo'|'roaming'|'umatilla'|'tokyo';

type ParticipantEndReason = 'disconnected_via_api'|'signaling_connection_error'|'signaling_connection_disconnected'|'signaling_connection_timed_out'|'client_received_an_invalid_signaling_message'|'client_sent_an_invalid_signaling_message'|'room_name_is_invalid'|'room_name_is_too_long'|'room_name_contains_invalid_characters'|'unable_to_create_room'|'unable_to_connect_to_room'|'room_contains_too_many_participants'|'room_not_found'|'max_participants_is_out_of_range'|'room_type_is_not_valid'|'timeout_is_out_of_range'|'status_callback_method_is_invalid'|'status_callback_is_invalid'|'status_is_invalid'|'room_creation_failed'|'room_completed_error'|'the_room_account_limit_was_exceeded'|'invalid_recording_rule'|'approaching_room_or_participant_concurrency_limits'|'recording_operation_requested_is_not_supported_for_the_Room_type'|'participant_identity_is_invalid'|'participant_identity_is_too_long'|'participant_identity_contains_invalid_characters'|'participant_has_too_many_tracks'|'participant_not_found'|'participant_disconnected_because_of_duplicate_identity'|'participant_account_limit_was_exceeded'|'invalid_subscribe_rule'|'track_is_invalid'|'track_name_is_invalid'|'track_name_is_too_long'|'track_name_contains_invalid_characters'|'track_name_is_duplicated'|'client_is_unable_to_create_or_apply_a_local_media_description'|'server_is_unable_to_create_or_apply_a_local_media_description'|'client_is_unable_to_apply_a_remote_media_description'|'server_is_unable_to_apply_a_remote_media_description'|'no_supported_codec'|'media_connection_failed_or_media_activity_ceased'|'unable_to_acquire_configuration'|'unable_to_acquire_TURN_credentials';

type ParticipantRoomStatus = 'in_progress'|'completed';

type ParticipantTwilioRealm = 'us1'|'us2'|'au1'|'br1'|'ie1'|'jp1'|'sg1'|'in1'|'de1'|'gll'|'outside'|'stage_us1'|'stage_us2'|'stage_au1'|'stage_br1'|'stage_ie1'|'stage_jp1'|'stage_sg1'|'stage_in1'|'stage_de1'|'dev_us1'|'dev_us2';

/**
 * Initialize the ParticipantList
 *
 * PLEASE NOTE that this class contains beta products that are subject to change.
 * Use them with caution.
 *
 * @param version - Version of the resource
 * @param roomSid - The room_sid
 */
declare function ParticipantList(version: V1, roomSid: string): ParticipantListInstance;

interface ParticipantListInstance {
  /**
   * @param sid - sid of instance
   */
  (sid: string): ParticipantContext;
  /**
   * Streams ParticipantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Function to process each record
   */
  each(callback?: (item: ParticipantInstance, done: (err?: Error) => void) => void): void;
  /**
   * Streams ParticipantInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Function to process each record
   */
  each(opts?: ParticipantListInstanceEachOptions, callback?: (item: ParticipantInstance, done: (err?: Error) => void) => void): void;
  /**
   * Constructs a participant
   *
   * @param participantSid - The participant_sid
   */
  get(participantSid: string): ParticipantContext;
  /**
   * Retrieve a single target page of ParticipantInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  getPage(callback?: (error: Error | null, items: ParticipantPage) => any): Promise<ParticipantPage>;
  /**
   * Retrieve a single target page of ParticipantInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle list of records
   */
  getPage(targetUrl?: string, callback?: (error: Error | null, items: ParticipantPage) => any): Promise<ParticipantPage>;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  list(callback?: (error: Error | null, items: ParticipantInstance[]) => any): Promise<ParticipantInstance[]>;
  /**
   * Lists ParticipantInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  list(opts?: ParticipantListInstanceOptions, callback?: (error: Error | null, items: ParticipantInstance[]) => any): Promise<ParticipantInstance[]>;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param callback - Callback to handle list of records
   */
  page(callback?: (error: Error | null, items: ParticipantPage) => any): Promise<ParticipantPage>;
  /**
   * Retrieve a single page of ParticipantInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle list of records
   */
  page(opts?: ParticipantListInstancePageOptions, callback?: (error: Error | null, items: ParticipantPage) => any): Promise<ParticipantPage>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

/**
 * Options to pass to each
 *
 * @property callback -
 *                         Function to process each record. If this and a positional
 *                         callback are passed, this one will be used
 * @property done - Function to be called upon completion of streaming
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         each() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no pageSize is defined but a limit is defined,
 *                         each() will attempt to read the limit with the most efficient
 *                         page size, i.e. min(limit, 1000)
 */
interface ParticipantListInstanceEachOptions {
  callback?: (item: ParticipantInstance, done: (err?: Error) => void) => void;
  done?: Function;
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to list
 *
 * @property limit -
 *                         Upper limit for the number of records to return.
 *                         list() guarantees never to return more than limit.
 *                         Default is no limit
 * @property pageSize -
 *                         Number of records to fetch per request,
 *                         when not set will use the default value of 50 records.
 *                         If no page_size is defined but a limit is defined,
 *                         list() will attempt to read the limit with the most
 *                         efficient page size, i.e. min(limit, 1000)
 */
interface ParticipantListInstanceOptions {
  limit?: number;
  pageSize?: number;
}

/**
 * Options to pass to page
 *
 * @property pageNumber - Page Number, this value is simply for client state
 * @property pageSize - Number of records to return, defaults to 50
 * @property pageToken - PageToken provided by the API
 */
interface ParticipantListInstancePageOptions {
  pageNumber?: number;
  pageSize?: number;
  pageToken?: string;
}

interface ParticipantPayload extends ParticipantResource, Page.TwilioResponsePayload {
}

interface ParticipantResource {
  account_sid: string;
  call_sid: string;
  codecs: ParticipantCodec[];
  duration_sec: number;
  edge_location: ParticipantEdgeLocation;
  end_reason: ParticipantEndReason;
  error_code: number;
  error_code_url: string;
  join_time: Date;
  leave_time: Date;
  media_region: ParticipantTwilioRealm;
  participant_identity: string;
  participant_sid: string;
  properties: object;
  publisher_info: object;
  room_sid: string;
  status: ParticipantRoomStatus;
  url: string;
}

interface ParticipantSolution {
  roomSid?: string;
}


declare class ParticipantContext {
  /**
   * Initialize the ParticipantContext
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param roomSid - The room_sid
   * @param participantSid - The participant_sid
   */
  constructor(version: V1, roomSid: string, participantSid: string);

  /**
   * fetch a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: ParticipantInstance) => any): Promise<ParticipantInstance>;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}


declare class ParticipantInstance extends SerializableClass {
  /**
   * Initialize the ParticipantContext
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param roomSid - The room_sid
   * @param participantSid - The participant_sid
   */
  constructor(version: V1, payload: ParticipantPayload, roomSid: string, participantSid: string);

  private _proxy: ParticipantContext;
  accountSid: string;
  callSid: string;
  codecs: ParticipantCodec[];
  durationSec: number;
  edgeLocation: ParticipantEdgeLocation;
  endReason: ParticipantEndReason;
  errorCode: number;
  errorCodeUrl: string;
  /**
   * fetch a ParticipantInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback?: (error: Error | null, items: ParticipantInstance) => any): Promise<ParticipantInstance>;
  joinTime: Date;
  leaveTime: Date;
  mediaRegion: ParticipantTwilioRealm;
  participantIdentity: string;
  participantSid: string;
  properties: any;
  publisherInfo: any;
  roomSid: string;
  status: ParticipantRoomStatus;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
  url: string;
}


declare class ParticipantPage extends Page<V1, ParticipantPayload, ParticipantResource, ParticipantInstance> {
  /**
   * Initialize the ParticipantPage
   *
   * PLEASE NOTE that this class contains beta products that are subject to change.
   * Use them with caution.
   *
   * @param version - Version of the resource
   * @param response - Response from the API
   * @param solution - Path solution
   */
  constructor(version: V1, response: Response<string>, solution: ParticipantSolution);

  /**
   * Build an instance of ParticipantInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ParticipantPayload): ParticipantInstance;
  /**
   * Provide a user-friendly representation
   */
  toJSON(): any;
}

export { ParticipantCodec, ParticipantContext, ParticipantEdgeLocation, ParticipantEndReason, ParticipantInstance, ParticipantList, ParticipantListInstance, ParticipantListInstanceEachOptions, ParticipantListInstanceOptions, ParticipantListInstancePageOptions, ParticipantPage, ParticipantPayload, ParticipantResource, ParticipantRoomStatus, ParticipantSolution, ParticipantTwilioRealm }
